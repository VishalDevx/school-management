import db from "@/db";
import { Class, Gender } from "@/generated/prisma"; // âœ… Enums generated by Prisma

// ---------- INTERFACE ----------
export interface Student {

  id?: number;
  name: string;
  fatherName: string;
  motherName: string;
  dob: string;
  class: Class;
  gender: Gender;
  address: string;
  profilePic?: string;
  rollNo: string;
  bloodGroup?: string;
  contactNo?: string;
  createdAt?: Date;
}

// ---------- CREATE STUDENT FUNCTION ----------
export const createStudent = async (data: Omit<Student, "id" | "createdAt">) => {
  try {
    const newStudent = await db.student.create({
      data,
    });
    return newStudent;
  } catch (error) {
    console.error("Error creating student:", error);
    throw new Error("Failed to create student");
  }
};

// -----------------GET STUDENT BY CLASS ---------------

export const studentByClass = async (className: Class): Promise<Student[]> => {
  try {
    const students = await db.student.findMany({
      where: { class: className },
      orderBy: { rollNo: "asc" }, // optional: sorted by roll number
    });
    return students;
  } catch (error) {
    console.error("Error fetching students by class:", error);
    throw new Error("Failed to fetch students by class");
  }
};
// ---------- GET STUDENT BY ROLL NUMBER ----------
export const studentByRollNo = async (rollNo: string): Promise<Student | null> => {
  try {
    const student = await db.student.findUnique({
      where: { rollNo },
    });
    return student;
  } catch (error) {
    console.error("Error fetching student by roll number:", error);
    throw new Error("Failed to fetch student by roll number");
  }
};
// ---------UPDATE STUDENT --------------
export const updateStudent = async (
  rollNo: string,
  data: Partial<Student>
): Promise<Student | null> => {
  try {
    const student = await db.student.update({
      where: { rollNo },
      data,
    });
    return student;
  } catch (error) {
    console.error("Error updating the student:", error);
    throw new Error("Failed to update the student");
  }
};
